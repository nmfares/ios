//
//  RatingControl.swift
//  FoodTracker
//
//  Created by Nadine Fares on 9/14/19.
//  Copyright Â© 2019 Nadine Fares. All rights reserved.
//

import UIKit

@IBDesignable class RatingControl: UIStackView { //IBDesignable lets Interface Builder instantiate and draw a copy of your control directly in the canvas.
    //MARK: Properties
    private var ratingButtons = [UIButton]()
    
    //This is the rating propert where we call update button selection states
    var rating = 0 {
        didSet {
            updateButtonSelectionStates()
        }
    }

    //sets up the button and sets the width and height of the buttons
    @IBInspectable var starSize: CGSize = CGSize(width: 44.0, height: 44.0) {
        didSet {
            setupButtons()
        }
    }
    
    //the star count which is set to 5
    @IBInspectable var starCount: Int = 5 {
        didSet {
            setupButtons()
        }
    }

    //MARK: Initialization
    override init(frame: CGRect) {
        //calls the superclass's initializer
        super.init(frame: frame)
        setupButtons()
    }
    
    required init(coder: NSCoder) {
        //calls the superclass's initializer
        super.init(coder: coder)
        setupButtons()

    }
    //MARK: Button Action
    @objc func ratingButtonTapped(button: UIButton) {
        guard let index = ratingButtons.firstIndex(of: button) else {
            fatalError("The button, \(button), is not in the ratingButtons array: \(ratingButtons)")
        }
        
        // Calculate the rating of the selected button
        let selectedRating = index + 1
        
        if selectedRating == rating {
            // If the selected star represents the current rating, reset the rating to 0.
            rating = 0
        } else {
            // Otherwise set the rating to the selected star
            rating = selectedRating
        }
    }

    //MARK: Private Methods
    private func setupButtons() {
        // clear any existing buttons
        for button in ratingButtons {
            removeArrangedSubview(button)
            button.removeFromSuperview()
        }
        ratingButtons.removeAll()

        // Load Button Images
        let bundle = Bundle(for: type(of: self))
        let filledStar = UIImage(named: "filledStar", in: bundle, compatibleWith: self.traitCollection)
        let emptyStar = UIImage(named:"emptyStar", in: bundle, compatibleWith: self.traitCollection)
        let highlightedStar = UIImage(named:"highlightedStar", in: bundle, compatibleWith: self.traitCollection)

        //for loop around the contents to create multiple buttons
        for index in 0..<starCount {
        // Create the button
        let button = UIButton()
            // Set the button images
            button.setImage(emptyStar, for: .normal)
            button.setImage(filledStar, for: .selected)
            button.setImage(highlightedStar, for: .highlighted)
            button.setImage(highlightedStar, for: [.highlighted, .selected])

        // Add constraints
        button.translatesAutoresizingMaskIntoConstraints = false //disables the button's automatically generated constraints. typically when you are using Auto Layout, you want to replace these autogenerated contrains with your own
        //give access to layout anchors (to create constraints)
        //isActive activates or deactivates the constraint
        button.heightAnchor.constraint(equalToConstant: 44.0).isActive = true
        button.widthAnchor.constraint(equalToConstant: 44.0).isActive = true
        
        // Set the accessibility label
        button.accessibilityLabel = "Set \(index + 1) star rating"
        
        // Setup the button action. Target refers to the current instance. #selector returns the selectur value for the provided method. UIControlEvents set defines a number of events that controls
        button.addTarget(self, action: #selector(RatingControl.ratingButtonTapped(button:)), for: .touchUpInside)

        // Add the button to the stack
        addArrangedSubview(button)
            
        // Add the new button to the rating button array: This keeps track of the buttons
        ratingButtons.append(button)

        }
        updateButtonSelectionStates()

    }
    
    /**
     This is a helper method that you'll use to update the selection state of the buttons
     **/
    private func updateButtonSelectionStates() {
        for (index, button) in ratingButtons.enumerated() {
            // If the index of a button is less than the rating, that button should be selected.
            button.isSelected = index < rating
            
            // Set the hint string for the currently selected star
            let hintString: String?
            if rating == index + 1 {
                hintString = "Tap to reset the rating to zero."
            } else {
                hintString = nil
            }
            
            // Calculate the value string
            let valueString: String
            switch (rating) {
            case 0:
                valueString = "No rating set."
            case 1:
                valueString = "1 star set."
            default:
                valueString = "\(rating) stars set."
            }
            
            // Assign the hint string and value string
            button.accessibilityHint = hintString
            button.accessibilityValue = valueString
        }
    }

}
